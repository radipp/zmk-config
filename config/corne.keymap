/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        cmb_bsp {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <8 9>;
            layers = <0>;
        };

        cmb_select_up {
            bindings = <&kp LC(LS(UP_ARROW))>;
            key-positions = <3 4>;
            layers = <3>;
        };

        cmb_select_right {
            bindings = <&kp LC(LS(RIGHT))>;
            key-positions = <16 15>;
            layers = <3>;
        };

        cmb_select_left {
            bindings = <&kp LC(LS(LEFT))>;
            key-positions = <14 15>;
            layers = <3>;
        };

        cmb_select_down {
            bindings = <&kp LS(LC(DOWN_ARROW))>;
            key-positions = <27 28>;
            layers = <3>;
        };

        cmb_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        cmb_del {
            bindings = <&kp DELETE>;
            key-positions = <10 11>;
            layers = <0>;
        };

        cmb_del_fwd_del {
            bindings = <&kp LC(DEL)>;
            key-positions = <9 7>;
            layers = <0>;
        };

        cmb_left_ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <16 15>;
            layers = <0 1>;
        };

        cmb_left_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <14 15>;
            layers = <0 1>;
        };

        cmb_left_alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <27 28>;
            layers = <0 1>;
        };

        cmb_left_gui {
            bindings = <&kp LEFT_WIN>;
            key-positions = <26 27>;
            layers = <0 1>;
        };

        cmb_right_ctrl {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <19 20>;
            layers = <0 1>;
        };

        cmb_right_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <20 21>;
            layers = <0 1>;
        };

        cmb_right_alt {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <31 32>;
            layers = <0 1>;
        };

        cmb_right_gui {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <32 33>;
            layers = <0 1>;
        };

        cmb_mo_3 {
            bindings = <&mo 3>;
            key-positions = <19 21>;
            layers = <0>;
        };

        cmb_quick_caps {
            bindings = <&caps_word>;
            key-positions = <16 14>;
            layers = <0>;
        };

        cmb_quick_bsp {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
            layers = <0>;
        };

        cmb_quick_tab {
            bindings = <&kp TAB>;
            key-positions = <3 4>;
            layers = <0>;
        };

        cmb_quick_shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <2 3>;
            layers = <0>;
        };

        cmb_period {
            bindings = <&kp PERIOD>;
            key-positions = <16 19>;
            layers = <0>;
        };

        cmb_repeat {
            bindings = <&key_repeat>;
            key-positions = <38 39>;
            layers = <0>;
        };

        cmb_quest {
            bindings = <&kp QUESTION>;
            key-positions = <4 7>;
        };

        cmb_excla {
            bindings = <&kp EXCLAMATION>;
            key-positions = <3 8>;
        };

        cmb_comma {
            bindings = <&kp COMMA>;
            key-positions = <28 31>;
        };

        cmb_dash {
            bindings = <&kp MINUS>;
            key-positions = <15 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &kp TAB  &kp Q  &kp W     &kp E  &kp R      &kp T      &kp Y  &kp U      &kp I    &kp O          &kp P   &kp BSPC
&kp LCTRL  &kp A  &kp S     &kp D  &kp F      &kp G      &kp H  &kp J      &kp K    &kp L  &kp SEMICOLON  &kp ENTER
&kp LSHFT  &kp Z  &kp X     &kp C  &kp V      &kp B      &kp N  &kp M  &kp COMMA  &kp DOT       &kp FSLH      &mo 3
                         &kp LALT  &mo 2  &kp SPACE    &kp RET  &mo 1      &mo 4
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans      &kp PLUS  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp ASTRK     &none  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &kp NUMBER_0  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp SLASH     &none  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans     &kp MINUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL     &none  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                                          &trans        &trans     &trans    &trans  &trans  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans        &kp CARET     &kp AMPERSAND          &kp TILDE        &kp PIPE            &none                &kp PLUS              &kp MINUS       &kp ASTERISK         &kp COLON      &kp EQUAL  &trans
&trans  &kp EXCLAMATION       &kp AT_SIGN           &kp HASH      &kp DOLLAR      &kp PERCENT    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS          &kp COMMA        &kp PERIOD  &kp SEMICOLON  &trans
&trans   &kp UNDERSCORE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE           &kp BACKSLASH              &kp SLASH      &kp LESS_THAN  &kp GREATER_THAN   &kp QUESTION  &trans
                                                       &none           &none        &kp SPACE                 &kp RET                &kp SQT  &kp DOUBLE_QUOTES
            >;
        };

        function {
            bindings = <
&kp ESCAPE    &kp LA(UP_ARROW)  &kp LS(LC(TAB))    &kp UP_ARROW  &kp LC(TAB)  &kp C_VOLUME_UP           &none         &none  &kp PRINTSCREEN  &none      &none  &none
  &kp CAPS  &kp LA(DOWN_ARROW)   &kp LEFT_ARROW  &kp DOWN_ARROW    &kp RIGHT     &kp C_VOL_DN      &bt BT_CLR         &none            &none  &none      &none  &none
    &trans           &kp LC(Z)        &kp LC(X)       &kp LC(C)    &kp LC(V)       &kp C_MUTE    &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &none  &kp QMARK  &none
                                                          &none     &kp HOME          &kp END     &kp PAGE_UP     &kp PG_DN            &none
            >;
        };

        mouse {
            bindings = <
&none  &kp KP_NUMLOCK  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9            &none    &none  &none  &none  &kp KP_N0      &kp KP_DOT  &none
&none           &none  &kp KP_NUMBER_4  &kp KP_NUMBER_2  &kp KP_NUMBER_6            &none    &none  &none  &none  &kp LCTRL  &kp LEFT_SHIFT  &none
&none           &none  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3      &kp KP_PLUS    &none  &none  &none      &none           &none  &none
                                           &kp KP_MINUS    &kp KP_DIVIDE  &kp KP_NUMBER_5    &none  &none  &none
            >;
        };
    };
};
